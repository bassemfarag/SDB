#include "driverlib.h"
#include "msp430fr5969.h"
void Init(void);
void main(void)
{
    Init();
  while (1)
  {
    __delay_cycles(500000);
    ADC12CTL0 |= ADC12ENC | ADC12SC;        // Start sampling/conversion
    __bis_SR_register(LPM0_bits | GIE);     // LPM0, ADC12_ISR will force exit
    __no_operation();                       // For debugger
  }
}








#pragma vector = ADC12_VECTOR
__interrupt void ADC12_ISR(void)

{
  switch(__even_in_range(ADC12IV, ADC12IV_ADC12RDYIFG))
  {
    case ADC12IV_NONE:        break;        // Vector  0:  No interrupt
    case ADC12IV_ADC12OVIFG:  break;        // Vector  2:  ADC12MEMx Overflow
    case ADC12IV_ADC12TOVIFG: break;        // Vector  4:  Conversion time overflow
    case ADC12IV_ADC12HIIFG:  break;        // Vector  6:  ADC12BHI
    case ADC12IV_ADC12LOIFG:  break;        // Vector  8:  ADC12BLO
    case ADC12IV_ADC12INIFG:  break;        // Vector 10:  ADC12BIN
    case ADC12IV_ADC12IFG0:                 // Vector 12:  ADC12MEM0 Interrupt
    //  if (ADC12MEM0 >= 0x7ff){               // ADC12MEM0 = A1 > 0.5AVcc?
        P1OUT |= BIT0;                      // P1.0 = 1
      __delay_cycles(500000);
         GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
   //   }
   /*   else{
        P1OUT &= ~BIT0;                     // P1.0 = 0
      __bic_SR_register_on_exit(LPM0_bits); // Exit active CPU

      }*/
      break;                                // Clear CPUOFF bit from 0(SR)
    case ADC12IV_ADC12IFG1:   break;        // Vector 14:  ADC12MEM1


   // ADC12MEM1 save data //
    case ADC12IV_ADC12IFG2:   break;        // Vector 16:  ADC12MEM2


    // ADC12MEM2 save data //
    default: break;
  }
}


void Init(void){

    //Disable watch dog.
    WDT_A_hold(WDT_A_BASE);

    PM5CTL0 &= ~LOCKLPM5;
    //Set P1.0 as output and low.
    GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    //Set P1.3 as output and low.
    GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN3);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN3);
    //Set P1.4 as output and low.
    GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN4);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN4);
    //Set P1.5 as output and low.
    GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN5);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN5);
    
    //Set Pin as input with pull up resistor.
    GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1,GPIO_PIN1);
    
    PMM_unlockLPM5();
    //Enable interrupt on a certain pin.
    GPIO_enableInterrupt(GPIO_PORT_P4,GPIO_PIN5);
    //Select interrupt edge.
    GPIO_selectInterruptEdge(GPIO_PORT_P4,GPIO_PIN5,GPIO_HIGH_TO_LOW_TRANSITION);
    //Clear interrupt.
    GPIO_clearInterrupt(GPIO_PORT_P4,GPIO_PIN5);
    //Enable interrupt generally.
    __bis_SR_register(GIE);


    /****************************************************/
    // Configure ADC12

    P1SEL1 |= BIT1;                           // Configure P1.1 for ADC
    P1SEL0 |= BIT1;
    // ADC12SHT1_x is for MEM8 till MEM23
    //ADC12SHT0_x is for MEM0 till MEM7
    ADC12CTL0 = ADC12SHT0_2 | ADC12ON;        //  S&H=16, ADC12 on
    ADC12CTL1 = ADC12SHP;                     // Use sampling timer
    ADC12CTL2 |= ADC12RES_2 | ADC12CONSEQ0;   // 12-bit conversion results // ADC12DF = 0 (Binary unsigned)
                                              // Sequence of channels
    ADC12MCTL0 |= ADC12INCH_1;                // A1 ADC input select; Vref=AVCC
    ADC12IER0 |= ADC12IE0;                    // Enable ADC conv complete interrupt

}
